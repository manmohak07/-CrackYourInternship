class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> s1 = new Stack<>();
        int max = 0;
        s1.push(0);

        for(int i = 1; i < heights.length; i++){
            while(!s1.isEmpty() && heights[i] < heights[s1.peek()]){
                max = getMax(heights, s1, max, i);
            }
            s1.push(i);
        }
        int i = heights.length;
        while(!s1.isEmpty()) {
            max = getMax(heights, s1, max, i);
        }
        return max;
    }
    static int getMax(int[] arr, Stack<Integer> stack, int max, int i){
        int area;
        int popped = stack.pop();
        if(stack.isEmpty()) {
            area = arr[popped] * i;
        } else {
            area = arr[popped] * (i - 1 - stack.peek());
        }
    
    return Math.max(max, area);
  }
}
