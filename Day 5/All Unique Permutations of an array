class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr , int n) {
        // code here
    ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Collections.sort(arr);
        boolean[] visited = new boolean[n];
        backtrack(result, new ArrayList<>(), arr, visited);
        return result;
    }
    
    static void backtrack(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> tempList, ArrayList<Integer> arr, boolean[] visited) {
        if (tempList.size() == arr.size()) {
            result.add(new ArrayList<>(tempList));
        } else {
            for (int i = 0; i < arr.size(); i++) {
                if (visited[i] || (i > 0 && arr.get(i) == arr.get(i - 1) && !visited[i - 1])) continue;
                visited[i] = true;
                tempList.add(arr.get(i));
                backtrack(result, tempList, arr, visited);
                visited[i] = false;
                tempList.remove(tempList.size() - 1);
            }
        }
    }
}
