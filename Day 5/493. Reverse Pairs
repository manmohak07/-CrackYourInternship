class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length - 1);
    }
    static int mergeSort(int[] nums, int left, int right) {
        if (right == left) return 0 ;

        int mid = (left + right) / 2;
        int count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right);

        for (int i = left, j = mid + 1; i <= mid && j <= right;){
            if (nums[i] >  ((long)nums[j] + (long)nums[j]) ){
                count += mid - i + 1; j++;
            } else i++;
        }
        merge(nums, left, mid, mid + 1, right);
        return count;
    }
    static void merge(int[] nums, int left1, int right1, int left2, int right2){
        if (left1 == left2) return;
        int[] data = Arrays.copyOfRange(nums, left1, right1 + 1);
        int index = 0;
        while (index < data.length && left2 <= right2) {
            nums[left1++] = data[index] <= nums[left2] ? data[index++] : nums[left2++];
        }
        while (index < data.length) nums[left1++] = data[index++];
        while (left2 <= right2) nums[left1++] = nums[left2++];
    }
	
}
